.. _xml.etree.ElementTree.creating:

=========================================
 Creating XML Documents with ElementTree
=========================================

In addition to its parsing capabilities, :mod:`xml.etree.ElementTree`
also supports creating well-formed XML documents from :class:`Element`
objects constructed in your application.  The :class:`Element` class
used when a document is parsed also knows how to generate a serialized
form of its contents, which can then be written to a file or other
data stream.

Building Element Nodes
======================

There are three helper functions useful for creating a hierarchy of
:class:`Element` nodes.  :func:`Element()` creates a standard node,
:func:`SubElement()` attaches a new node to a parent, and
:func:`Comment()` creates a node that serializes using XML's comment
syntax.

.. include:: ElementTree_create.py
   :literal:
   :start-after: #end_pymotw_header

The output contains only the XML nodes in the tree, not the XML declaration
with version and encoding.

.. {{{cog
.. cog.out(run_script(cog.inFile, 'ElementTree_create.py'))
.. }}}

::

	$ python ElementTree_create.py
	<top><!-- Generated for PyMOTW --><child>This child contains text.</child><child_with_tail>This child has regular text.</child_with_tail>And "tail" text.<child_with_entity_ref>This &amp; that</child_with_entity_ref></top>

.. {{{end}}}

Notice that the ``&`` character in the text of
``child_with_entity_ref`` is converted to the entity reference
``&amp;`` automatically.

Pretty-Printing XML
===================

ElementTree makes no effort to "pretty print" the output produced by
:func:`tostring()`, since adding extra whitespace changes the contents
of the document.  To make the output easier to follow for human
readers, the rest of the examples below will use `a tip I found online
<http://renesd.blogspot.com/2007/05/pretty-print-xml-with-python.html>`_
and re-parse the XML with :mod:`xml.dom.minidom` then use its
:func:`toprettyxml()` method.

.. include:: ElementTree_pretty.py
   :literal:
   :start-after: #end_pymotw_header

The updated example now looks like:

.. include:: ElementTree_create_pretty.py
   :literal:
   :start-after: #end_pymotw_header

and the output is easier to read:

.. {{{cog
.. cog.out(run_script(cog.inFile, 'ElementTree_create_pretty.py'))
.. }}}

::

	$ python ElementTree_create_pretty.py
	<?xml version="1.0" ?>
	<top>
	  <!-- Generated for PyMOTW -->
	  <child>
	    This child contains text.
	  </child>
	  <child_with_tail>
	    This child has regular text.
	  </child_with_tail>
	  And &quot;tail&quot; text.
	  <child_with_entity_ref>
	    This &amp; that
	  </child_with_entity_ref>
	</top>
	

.. {{{end}}}

In addition to the extra whitespace for formatting, the
:mod:`xml.dom.minidom` pretty-printer also adds an XML declaration to
the output.


Setting Element Properties
==========================

The previous example created nodes with tags and text content, but did
not set any attributes of the nodes.  Many of the examples from
:ref:`xml.etree.ElementTree.parsing` worked with an OPML_ file listing
podcasts and their feeds.  The ``outline`` nodes in the tree used
attributes for the group names and podcast properties.  We can use
:class:`ElementTree` to construct a similar XML file from a CSV input
file, setting all of the element attributes as the tree is
constructed.

.. include:: ElementTree_csv_to_xml.py
   :literal:
   :start-after: #end_pymotw_header

The attribute values can be configured one at a time with
:func:`set()` (as with the ``root`` node), or all at once by passing a
dictionary to the node factory (as with each group and podcast node).

.. {{{cog
.. cog.out(run_script(cog.inFile, 'ElementTree_csv_to_xml.py'))
.. }}}

::

	$ python ElementTree_csv_to_xml.py
	<?xml version="1.0" ?>
	<opml version="1.0">
	  <!-- Generated by ElementTree_csv_to_xml.py for PyMOTW -->
	  <head>
	    <title>
	      My Podcasts
	    </title>
	    <dateCreated>
	      2010-07-21 18:58:09.889434
	    </dateCreated>
	    <dateModified>
	      2010-07-21 18:58:09.889434
	    </dateModified>
	  </head>
	  <body>
	    <outline text="Science and Tech">
	      <outline htmlUrl="http://www.publicradio.org/columns/futuretense/" text="APM: Future Tense" xmlUrl="http://www.publicradio.org/columns/futuretense/podcast.xml"/>
	    </outline>
	    <outline text="Science and Tech">
	      <outline htmlUrl="http://www.uh.edu/engines/engines.htm" text="Engines Of Our Ingenuity Podcast" xmlUrl="http://www.npr.org/rss/podcast.php?id=510030"/>
	    </outline>
	    <outline text="Science and Tech">
	      <outline htmlUrl="http://www.nyas.org/WhatWeDo/SciencetheCity.aspx" text="Science &amp; the City" xmlUrl="http://www.nyas.org/Podcasts/Atom.axd"/>
	    </outline>
	    <outline text="Books and Fiction">
	      <outline htmlUrl="http://www.podiobooks.com/blog" text="Podiobooker" xmlUrl="http://feeds.feedburner.com/podiobooks"/>
	    </outline>
	    <outline text="Books and Fiction">
	      <outline htmlUrl="http://web.me.com/normsherman/Site/Podcast/Podcast.html" text="The Drabblecast" xmlUrl="http://web.me.com/normsherman/Site/Podcast/rss.xml"/>
	    </outline>
	    <outline text="Books and Fiction">
	      <outline htmlUrl="http://www.tor.com/" text="tor.com / category / tordotstories" xmlUrl="http://www.tor.com/rss/category/TorDotStories"/>
	    </outline>
	    <outline text="Computers and Programming">
	      <outline htmlUrl="http://twit.tv/mbw" text="MacBreak Weekly" xmlUrl="http://leo.am/podcasts/mbw"/>
	    </outline>
	    <outline text="Computers and Programming">
	      <outline htmlUrl="http://twit.tv" text="FLOSS Weekly" xmlUrl="http://leo.am/podcasts/floss"/>
	    </outline>
	    <outline text="Computers and Programming">
	      <outline htmlUrl="http://www.coreint.org/" text="Core Intuition" xmlUrl="http://www.coreint.org/podcast.xml"/>
	    </outline>
	    <outline text="Python">
	      <outline htmlUrl="http://advocacy.python.org/podcasts/" text="PyCon Podcast" xmlUrl="http://advocacy.python.org/podcasts/pycon.rss"/>
	    </outline>
	    <outline text="Python">
	      <outline htmlUrl="http://advocacy.python.org/podcasts/" text="A Little Bit of Python" xmlUrl="http://advocacy.python.org/podcasts/littlebit.rss"/>
	    </outline>
	    <outline text="Python">
	      <outline htmlUrl="" text="Django Dose Everything Feed" xmlUrl="http://djangodose.com/everything/feed/"/>
	    </outline>
	    <outline text="Miscelaneous">
	      <outline htmlUrl="http://www.castsampler.com/users/dhellmann/" text="dhellmann's CastSampler Feed" xmlUrl="http://www.castsampler.com/cast/feed/rss/dhellmann/"/>
	    </outline>
	  </body>
	</opml>
	

.. {{{end}}}

Serializing XML to a Stream
===========================

:func:`tostring()` is implemented to write to an in-memory file-like
object and then return a string representing the entire element tree.
When working with large amounts of data, it will take less memory and
make more efficient use of the I/O libraries to write directly to a
file handle using the :func:`write()` method of :class:`ElementTree`.

.. include:: ElementTree_write.py
   :literal:
   :start-after: #end_pymotw_header

The example uses :ref:`sys.stdout <sys-input-output>` to write to the
console, but it could also write to an open file or socket.

.. {{{cog
.. cog.out(run_script(cog.inFile, 'ElementTree_write.py'))
.. }}}

::

	$ python ElementTree_write.py
	<top><!-- Generated for PyMOTW --><child>This child contains text.</child><child_with_tail>This child has regular text.</child_with_tail>And "tail" text.<child_with_entity_ref>This &amp; that</child_with_entity_ref></top>

.. {{{end}}}



.. seealso::

   Outline Processor Markup Language, OPML_
       Dave Winer's OPML specification and documentation.

.. _OPML: http://www.opml.org/
